version: '3.7'
services:
  ego-api:
    image: "overture/ego:3.4.0"
    environment:
      SERVER_PORT: 8080
      SPRING_DATASOURCE_URL: jdbc:postgresql://ego-postgres:5432/ego?stringtype=unspecified
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: password
      SPRING_FLYWAY_ENABLED: "true"
      SPRING_FLYWAY_LOCATIONS: "classpath:flyway/sql,classpath:db/migration"
      SPRING_PROFILES: demo, auth
      JWT_DURATIONMS: 300000 # expire tokens in 5 min for local testing
    expose:
      - "8080"
    ports:
      - "9082:8080"
    depends_on:
      - ego-postgres
  ego-postgres:
    image: postgres:11.1
    environment:
      - POSTGRES_DB=ego
      - POSTGRES_PASSWORD=password
    expose:
      - "5432"
    volumes:
      - "./docker/ego-init:/docker-entrypoint-initdb.d"
    ports:
      - "9444:5432"
  object-storage:
    #NOTE: must use 2018-05-11 version, since the ETag rules are different. 2018 will return the part md5, anything newer will not, and score-server expects etag==md5
    image: minio/minio:RELEASE.2018-05-11T00-29-24Z
    environment:
      MINIO_ACCESS_KEY: minio
      MINIO_SECRET_KEY: minio123
    command: server /data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    ports:
      - "8085:9000"
  score-server:
    image: overture/score-server:5.1.0
    user: "$MY_UID:$MY_GID"
    environment:
      SPRING_PROFILES_ACTIVE: amazon,collaboratory,prod,secure,jwt
      SERVER_PORT: 8080
      OBJECT_SENTINEL: heliograph
      BUCKET_NAME_OBJECT: oicr.icgc.test
      BUCKET_NAME_STATE: oicr.icgc.test
      COLLABORATORY_DATA_DIRECTORY: data
      METADATA_URL: http://song-server:8080
      S3_ENDPOINT:  http://object-storage:9000
      S3_ACCESSKEY: minio
      S3_SECRETKEY: minio123
      S3_SIGV4ENABLED: "true"
      AUTH_JWT_PUBLICKEYURL: http://ego-api:8080/oauth/token/public_key
      AUTH_SERVER_URL: http://ego-api:8080/o/check_api_key/
      AUTH_SERVER_CLIENTID: score
      AUTH_SERVER_CLIENTSECRET: scoresecret
      AUTH_SERVER_TOKENNAME: apiKey
      AUTH_SERVER_SCOPE_DOWNLOAD_SYSTEM: score.READ
      AUTH_SERVER_SCOPE_DOWNLOAD_STUDY_PREFIX: score.
      AUTH_SERVER_SCOPE_DOWNLOAD_STUDY_SUFFIX: .READ
      AUTH_SERVER_SCOPE_UPLOAD_SYSTEM: score.WRITE
      AUTH_SERVER_SCOPE_UPLOAD_STUDY_PREFIX: score.
      AUTH_SERVER_SCOPE_UPLOAD_STUDY_SUFFIX: .WRITE
      SERVER_SSL_ENABLED: "false"
      UPLOAD_PARTSIZE: 1073741824
      UPLOAD_CONNECTION_TIMEOUT: 1200000
      LOGGING_LEVEL_BIO_OVERTURE_SCORE_SERVER: DEBUG
      LOGGING_LEVEL_ORG_APACHE_HTTP_WIRE: DEBUG
      LOGGING_LEVEL_ORG_APACHE_HTTP_HEADERS: DEBUG
      ENDPOINTS_DUMP_ENABLED: "false"
      ENDPOINTS_ENV_ENABLED: "true"
      ENDPOINTS_INFO_ENABLED: "true"
    ports:
      - "8087:8080"
    depends_on:
      - object-storage
      - ego-api
    volumes:
      - "./docker/scratch/score-server-logs:/score-server/logs"

  score-client:
    image: overture/score:5.0.0
    environment:
      ACCESSTOKEN: f69b726d-d40f-4261-b105-1ec7e6bf04d5
      METADATA_URL: http://song-server:8080
      STORAGE_URL: http://score-server:8080
    volumes:
      - "./docker/song-example-data:/data/submit"
      - "./docker/scratch/score-client-logs:/score-client/logs"
      - "./docker/scratch/song-client-output:/song-client/output"
    command: bin/score-client
    user: "$MY_UID:$MY_GID"

  song-db:
    image: postgres:11.1
    environment:
      POSTGRES_DB: song
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - "8432:5432"
    volumes:
      - "./docker/song-db-init:/docker-entrypoint-initdb.d"

  aws-cli:
    image: "mesosphere/aws-cli:latest"
    environment:
      AWS_ACCESS_KEY_ID: minio
      AWS_SECRET_ACCESS_KEY: minio123
      AWS_DEFAULT_REGION: us-east-1
    volumes:
      - "./docker/object-storage-init/data/oicr.icgc.test/data:/score-data:ro"

  song-client:
    build:
      context: ./
      dockerfile: "$DOCKERFILE_NAME"
      target: client
    environment:
      CLIENT_ACCESS_TOKEN: f69b726d-d40f-4261-b105-1ec7e6bf04d5
      CLIENT_STUDY_ID: ABC123
      CLIENT_DEBUG: "true"
      CLIENT_SERVER_URL: http://song-server:8080
      JAVA_TOOL_OPTIONS: -agentlib:jdwp=transport=dt_socket,address=*:5005,server=y,suspend=n
    ports:
      - "5005:5005"
    volumes:
      - "./docker/song-example-data:/data/submit"
      - "./docker/scratch/song-client-logs:/song-client/logs"
      - "./docker/scratch/song-client-output:/song-client/output"
    command: bin/sing
    user: "$MY_UID:$MY_GID"

  song-server:
    build:
      context: ./
      dockerfile: "$DOCKERFILE_NAME"
      target: server
    environment:
      SERVER_PORT: 8080
      SPRING_PROFILES_ACTIVE: "prod,secure,default,jwt,score-client-cred"
      AUTH_JWT_PUBLICKEYURL: http://ego-api:8080/oauth/token/public_key
      AUTH_SERVER_URL: http://ego-api:8080/o/check_api_key/
      AUTH_SERVER_CLIENTID: song
      AUTH_SERVER_TOKENNAME: apiKey
      AUTH_SERVER_CLIENTSECRET: songsecret
      AUTH_SERVER_SCOPE_STUDY_PREFIX: song.
      AUTH_SERVER_SCOPE_STUDY_SUFFIX: .WRITE
      AUTH_SERVER_SCOPE_SYSTEM: song.WRITE
      SCORE_URL: http://score-server:8080
      SCORE_CLIENTCREDENTIALS_ID: songToScore
      SCORE_CLIENTCREDENTIALS_SECRET: songToScoreSecret
      SCORE_CLIENTCREDENTIALS_TOKENURL: http://ego-api:8080/oauth/token
      SCORE_CLIENTCREDENTIALS_SYSTEMSCOPE: "score.WRITE"
      MANAGEMENT_SERVER_PORT: 8081
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: password
      SPRING_DATASOURCE_URL: jdbc:postgresql://song-db/song?stringtype=unspecified
      SPRING_FLYWAY_ENABLED: "true"
      SPRING_FLYWAY_LOCATIONS: "classpath:db/migration"
      ID_USELOCAL: "false"
      ID_FEDERATED_AUTH_BEARER_TOKEN:              f69b726d-d40f-4261-b105-1ec7e6bf04d5
      ID_FEDERATED_URITEMPLATE_DONOR:              http://dcc-id-server:8080/donor/id?submittedProjectId={studyId}&submittedDonorId={submitterId}&create=true
      ID_FEDERATED_URITEMPLATE_SPECIMEN:           http://dcc-id-server:8080/specimen/id?submittedProjectId={studyId}&submittedSpecimenId={submitterId}&create=true
      ID_FEDERATED_URITEMPLATE_SAMPLE:             http://dcc-id-server:8080/sample/id?submittedProjectId={studyId}&submittedSampleId={submitterId}&create=true
      ID_FEDERATED_URITEMPLATE_FILE:               http://dcc-id-server:8080/object/id?analysisId={analysisId}&fileName={fileName}
      ID_FEDERATED_URITEMPLATE_ANALYSIS_EXISTENCE: http://dcc-id-server:8080/analysis/id?submittedAnalysisId={analysisId}&create=false
      ID_FEDERATED_URITEMPLATE_ANALYSIS_GENERATE:  http://dcc-id-server:8080/analysis/unique
      ID_FEDERATED_URITEMPLATE_ANALYSIS_SAVE:      http://dcc-id-server:8080/analysis/id?submittedAnalysisId={analysisId}&create=true
      JAVA_TOOL_OPTIONS: -agentlib:jdwp=transport=dt_socket,address=*:5006,server=y,suspend=n
    restart: always
    ports:
      - "5006:5006"
      - "8080:8080"
    depends_on:
      - song-db 
      - ego-api
      - score-server
      - dcc-id-server
    volumes:
      - "./docker/scratch/song-server-logs:/song-server/logs"
    user: song
  dcc-id-db:
    image: icgcdcc/dcc-id-db:3908f82
    environment:
      POSTGRES_DB: dcc_identifier
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
  dcc-id-server:
    image: icgcdcc/dcc-id-server:3908f82
    environment:
      AUTH_SERVER_URL: http://ego-api:8080/o/check_token/
      AUTH_SERVER_CLIENTID: dcc-id
      AUTH_SERVER_CLIENTSECRET: dccidsecret
      AUTH_SERVER_PREFIX: id
      AUTH_SERVER_SUFFIX: WRITE
      AUTH_CONNECTION_MAXRETRIES: 5
      AUTH_CONNECTION_INITIALBACKOFF: 15000
      AUTH_CONNECTION_MULTIPLIER: 2.0
      SPRING_DATASOURCE_URL: jdbc:postgresql://dcc-id-db/dcc_identifier
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: password
      SPRING_PROFILES_ACTIVE: secure
    restart: always
    depends_on:
      - dcc-id-db
      - ego-api
    expose:
      - "8080"
    ports:
      - "8086:8080"

volumes:
    object-storage-data: {}
