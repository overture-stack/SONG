#
# Copyright (c) 2017 The Ontario Institute for Cancer Research. All rights reserved.
#
# This program and the accompanying materials are made available under the terms of the GNU Public License v3.0.
# You should have received a copy of the GNU General Public License along with
# this program. If not, see <http://www.gnu.org/licenses/>.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY
# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
# OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT
# SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
# TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
# OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER
# IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
# ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
#
song:
  # the unique id of this song, this becomes important in multi songs setup where
  # we need to identify which song is the source of an analysis
  id: song.overture

server:
  version: 1.0
  port: 8080
  # fix issue IllegalArgumentException: Request header is too large. default 8KB
  max-http-header-size: 10KB

score:
  # Require both upload and download scopes
  accessToken: "ad83ebde-a55c-11e7-abc4-cec278b6b50a"
  url: "http://localhost:8087"

# Hibernate
spring:
  flyway:
    enabled: true
    locations: "classpath:db/migration"
  jpa:
    properties:
      hibernate:
        dialect: com.marvinformatics.hibernate.json.PostgreSQLJsonDialect
        # disable driver's feature detection. This is required for the following bug in SpringBoot 2.0.0+
        # https://hibernate.atlassian.net/browse/HHH-12368
        temp.use_jdbc_metadata_defaults: false
  datasource:
    driver-class-name: org.postgresql.Driver
    url: jdbc:postgresql://localhost:5432/song?stringtype=unspecified
    username: postgres
    password: password
    max-active: 10
    max-idle: 1
    min-idle: 1
    init.mode: always
    hikari:
      connection-timeout: 500
  mvc:
    pathmatch:
      matching-strategy: ant_path_matcher

logging:
  level:
    io:
      swagger:
        models:
          parameters:
            AbstractSerializableParameter: ERROR

# Hibernate SQL Debugging
#spring.jpa.properties.hibernate.format_sql: true
#logging.level.org.hibernate.SQL: DEBUG
#logging.level.org.hibernate.type.descriptor.sql: TRACE

# Spring JPA Transaction logging
#logging.level.org.springframework.orm.jpa.JpaTransactionManager: DEBUG

# When you are desperate, use this...
#logging.level.org.hibernate: TRACE

# Management
management:
  server:
    port: 8081

swagger:
  alternateUrl: "/api-docs"
  # host and base url are needed if you run song behind a reverse proxy
  # and rewrite the url eg: http://mydomain.com/song/swagger-ui.html
  # in this case host = mydomain.com, baseUrl = /song
  host: ""
  basePath: ""

security.basic.enabled: false

id:
  useLocal: true
  federated:
    auth:
      bearer:
        token:
        # Placeholder for issue SONG-491
        credentials:
          url:
          clientId:
          clientSecret:
    uriTemplate:
      donor: https://id.example.org/donor/id?submittedProjectId={studyId}&submittedDonorId={submitterId}&create=true
      specimen: https://id.example.org/specimen/id?submittedProjectId={studyId}&submittedSpecimenId={submitterId}&create=true
      sample: https://id.example.org/sample/id?submittedProjectId={studyId}&submittedSampleId={submitterId}&create=true

validation:
  delayMs: 30
  threads:
    core: 5
    max: 10
  queue:
    capacity: 100

auth:

  # Connection retries in case of connection failure
  connection:

    # Max number of retries
    maxRetries: 5

    # Initial timeoutMs before the first retry. In milliseconds.
    initialBackoff: 15000

    # Multiplier that defines value of consequent timeouts before the next retry.
    # E.g. TIMEOUT(n) = TIMEOUT(n-1) * MULTIPLIER
    multiplier: 2.0

schemas:
  enforceLatest: true
---
spring:
  config:
    activate:
      on-profile: async-test
validation.delayMs: 1000

---
spring:
  config:
    activate:
      on-profile: test
  autoconfigure.exclude: SecurityConfig.class
  datasource:
    driver-class-name: org.testcontainers.jdbc.ContainerDatabaseDriver
    url: jdbc:tc:postgresql:9.6.12://blabla:5432/test_db?stringtype=unspecified
    username:
    password:
    max-active: 10
    max-idle: 1
    min-idle: 1
    hikari:
      connection-timeout: 500
      validation-timeout: 250

id.persistInMemory: true

# This url should not exist
score.url: http://localhost:0

auth:
  server:
    url: "http://localhost:8084/check_token/"
    clientId: "3kJhz9pNtC0pFHAxr2SPkUkGjXrkWWqGcnPC0vBP"
    clientSecret: "v9mjRtuEVwpt7cgqnsq6mxtCa5FbUOpKLGh7WX8a1dWbBKfrM3iV3VYMtE60jr3W7GLWtNeYIaJ8EUxPkaInclWVXf64qKdR3IKwyfpDU7JhvWEwIYQYdwV1YAUZjB2e"
    tokenName: "token"
    enableStrictSSL: false
    enableHttpLogging: false
    scope:
      study:
        prefix: "song-"
        suffix: ".WRITE"
      system: "song.WRITE"

---
spring:
  config:
    activate:
      on-profile: dev
  datasource:
    init.mode: always
    hikari:
      connection-timeout: 500

management:
  server:
    port: -1

id.persistInMemory: true

---
spring:
  config:
    activate:
      on-profile: secure
  security:
    oauth2:
      resourceserver:
        jwt:
          # EGO public key
          public-key-location: http://localhost:8081/oauth/token/public_key
          # Keycloak JWK
          #jwk-set-uri: http://localhost/realms/myrealm/protocol/openid-connect/certs
auth:
  server:
    # check API Key endpoint
    introspectionUri: http://localhost:8081/o/check_api_key
    tokenName: apiKey
    # Define a valid auth provider: ego or keycloak
    provider: ego
    # Keycloak config
    keycloak:
      host: http://localhost
      realm: "myrealm"

    clientID: id
    clientSecret: secret
    scope:
      study:
        prefix: "PROGRAMDATA-"
        suffix: ".WRITE"
      system: "song.WRITE"
---
spring:
  config:
    activate:
      on-profile: fastTest

auth:
  connection:
    # Max number of retries
    maxRetries: 5

    # Initial timeoutMs before the first retry. In milliseconds.
    initialBackoff: 50

    # Multiplier that defines value of consequent timeouts before the next retry.
    # E.g. TIMEOUT(n) = TIMEOUT(n-1) * MULTIPLIER
    multiplier: 1.2

---
spring:
  config:
    activate:
      on-profile: prod
  datasource:
    init.mode: never

# Datasource
spring.datasource:
  driver-class-name: org.postgresql.Driver
  url: jdbc:postgresql://localhost/song?stringtype=unspecified
  username:
  password:
  max-active: 10
  max-idle: 1
  min-idle: 1

---
spring:
  config:
    activate:
      on-profile: kafka
  kafka:
    bootstrap-servers: localhost:9092
    template:
      default-topic: song-analysis

---

spring:
  config:
    activate:
      on-profile: score-client-cred
score:
  url: "http://localhost:8087"
  clientCredentials:
    id: oauth
    secret: oauthsecret
    tokenUrl: http://ego-api:8080/oauth/token
    systemScope: "score.WRITE" # Storage scope needs to include both READ and WRITE
